{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MoviePoster","_ref2","image","alt","react_default","a","createElement","src","MovieGenre","_ref3","genre","className","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","greeting","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","console","log","data","catch","err","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PC+BxC,SAASC,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,MAAOC,EAAMF,EAANE,IACzB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAOC,IAAKA,IAI9B,SAASK,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIN,EAAAC,EAAAC,cAAA,QAAMK,UAAU,gBAAgBD,GAoBzBE,MAtDf,SAAAC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOZ,EAA0BW,EAA1BX,MAAOa,EAAmBF,EAAnBE,OAAQC,EAAWH,EAAXG,SAClC,OACIZ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SACXP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACXP,EAAAC,EAAAC,cAACN,EAAD,CAAaE,MAAOA,EAAOC,IAAKW,KAEpCV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACXP,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACVI,EAAOE,IAAI,SAACP,EAAOQ,GAAR,OAAkBd,EAAAC,EAAAC,cAACE,EAAD,CAAYE,MAAOA,EAAOS,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACXP,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBC2CjBC,6MAzDXC,MAAQ,CACJC,SAAU,iBAWdC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYC,EAAKC,WADjB,OACHP,EADGG,EAAAK,KAETF,EAAKG,SAAS,CACVT,OAAQA,IAHH,wBAAAG,EAAAO,SAAAX,QAObQ,SAAW,WACP,OAAOI,MAAM,iEACRC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAEE,OADAC,QAAQC,IAAIF,EAAKG,MACVH,EAAKG,KAAKjB,SAGxBkB,MAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,QAGlCC,cAAgB,WACZ,OAAOd,EAAKV,MAAMI,OAAOd,IAAI,SAAAmC,GAEzB,OADAN,QAAQC,IAAIK,GACLhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAOvC,MAAOsC,EAAME,cACbpD,MAAOkD,EAAMG,mBACbpC,IAAKiC,EAAMI,GACXzC,OAAQqC,EAAMrC,OACdC,SAAUoC,EAAMpC,kGAhClC8B,QAAQC,IAAI,0DAIZU,KAAK5B,8CAoCL,IAAME,EAAS0B,KAAK9B,MAAMI,OAE1B,OACI3B,EAAAC,EAAAC,cAAA,OAAKK,UAAWoB,EAAS,MAAQ,mBAC5BA,EAAS0B,KAAKN,gBAAkB,qBAnD/BO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.af9af4ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types'\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport \"./Movie.css\";\n\nfunction Movie({title, image, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster image={image} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine=\"3\"\n                        ellipsis=' ...'\n                        trimRight\n                        basedOn='letters'\n                    />\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster({image, alt}) {\n    return (\n        <img src={image} alt={alt}/>\n    )\n}\n\nfunction MovieGenre({genre}) {\n    return (\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n};\n\nMoviePoster.propTypes = {\n    image: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie;","import React from 'react';\nimport {Component} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n    state = {\n        greeting: \"Hello Movie\",\n    }\n\n    componentWillMount() {\n        console.log('will mount')\n    }\n\n    componentDidMount() {\n        this._getMovies();\n    }\n\n    _getMovies = async () => {\n        const movies = await this._callApi()\n        this.setState({\n            movies: movies\n        })\n    }\n\n    _callApi = () => {\n        return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n            .then(response => response.json())\n            .then(json => {\n                    console.log(json.data)\n                    return json.data.movies\n                }\n            )\n            .catch(err => console.log(err))\n    }\n\n    _renderMovies = () => {\n        return this.state.movies.map(movie => {\n            console.log(movie)\n            return <Movie title={movie.title_english}\n                          image={movie.medium_cover_image}\n                          key={movie.id}\n                          genres={movie.genres}\n                          synopsis={movie.synopsis}\n\n            />\n        })\n    }\n\n    render() {\n\n        const movies = this.state.movies;\n\n        return (\n            <div className={movies ? \"App\" : \"App--Loading...\"}>\n                {movies ? this._renderMovies() : \"Loading...\"}\n            </div>\n        );\n    }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}